import sys
import argparse
import os

from utils.filemanager import get_points_paths
from utils.logger import logger, pprint
from utils.landmarks import get_landmarks_from_txt, write_landmarks_to_list

if __name__ == "__main__":
    # optional arguments from the command line 
    parser = argparse.ArgumentParser()

    parser.add_argument('--experiment_name', type=str, default='elastix_01', help='experiment name')
    parser.add_argument('--reg_params_key', type=str, default='Parameter.affine+Parameter.bsplines', help='registration parameters key generated by create_script.py')
    parser.add_argument('--output_path', type=str, default='output', help='root dir for output scripts')
    parser.add_argument("--generate_report", action='store_true', help='if True, an evaluation report .txt file will be generated. If not, only the transformed keypoints txt file will be generated for each test sample.')

    # parse the arguments
    args = parser.parse_args()

    # create experiment search path
    # points is the folder where the transformed points are saved using transformix
    args.exp_points_output = os.path.join(args.output_path, args.experiment_name, args.reg_params_key, 'points')
    
    # get a list of all the transformed keypoints files
    transformed_points = get_points_paths(args, "outputpoints")

    if len(transformed_points) == 0:
        logger.error(f"No transformed points found in {args.exp_points_output} directory.")
        sys.exit(1)

    logger.info(f"Found {len(transformed_points)} transformed points files for subjects ({[subject.split('/')[-2] for subject in transformed_points]})")

    # extract the transformed points from the transformed_points transformix files and save them in a separate file
    for transformed_points_file in transformed_points:
        print(f"Processing {transformed_points_file}...")

        # get the transformed points
        transformed_landmarks = get_landmarks_from_txt(transformed_points_file, search_key='OutputIndexFixed')

        # the transformed points has to be 300
        assert len(transformed_landmarks) == 300, f"Transformed points file {transformed_points_file} has {len(transformed_landmarks)} points instead of 300."
        
        # write the transformed points to a file 
        # the points are written inside the same directory as the transformed_points_file
        output_landmarks_path = os.path.join(transformed_points_file.replace('outputpoints.txt', ''), 'outputpoints_transformed.txt')
        write_landmarks_to_list(transformed_landmarks, output_landmarks_path)

    # generate the evaluation report if args.generate_report is True, this is when we have the ground truth exhale files
    if args.generate_report:
        pass

